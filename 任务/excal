# 目的

1.读取excal表的信息

2.将用户数据导出为excal表格

3.打包



# 使用POI

poi会将excel的所有数据放入内存，再将其读出，所以当文件过大时可能会OOM（内存溢出）

适用于小文件，速度快

## excel

![image-20200729224959683](C:\Users\Barcelona\AppData\Roaming\Typora\typora-user-images\image-20200729224959683.png)

![](https://gitee.com/yzy1061603811/image/img/20200729225523.png)

![image-20200729225952130](https://gitee.com/yzy1061603811/image/20200729225952.png)



### xls版和xlsx不同

两个版本需要使用不同的依赖

```xml
<!--03版excel-->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>3.13</version>
        </dependency>
        <!--07版excal-->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>3.13</version>
        </dependency>
```



#### xls

最多只有65536行，使用**HSSFWorkbook**

写入速度快，但是写入数据的量不大

![image-20200723143654649](excal.assets/image-20200723143654649.png)

```java
public void test1() throws Exception {
       //使用HSSF创建工作簿
       Workbook workbook = new HSSFWorkbook();
//      后缀为xls
       FileOutputStream fileOutputStream = new FileOutputStream(PATH + "studen03.xls");
   }
```

![image-20200723164530170](excal.assets/image-20200723164530170.png)

#### xlsx

数量没有限制，使用**XSSFWorkbook**

写入数据非常慢，耗内存，会发生内存溢出，但是可以写很大的数据量

可以使用加强版的**SXSSF**

- 可以写**非常大的数据量**，**写速度快**，**占用内存少**

- 会产生临时文件，需要清理

- 每次读取100条数据，如果超过就被写入临时文件

  

![image-20200723143834011](excal.assets/image-20200723143834011.png)

```java
public void test2() throws Exception {
       //使用XSSF创建工作簿
       Workbook workbook = new XSSFWorkbook();
    //文件后缀为xlsx
       FileOutputStream fileOutputStream = new FileOutputStream(PATH + "studen07.xlsx");
   }
```



## 导出



### 基本的excel文件生成

```java
public void test2() throws Exception {
       //创建工作簿
       Workbook workbook = new XSSFWorkbook();
        //创建工作表
       Sheet sheet = workbook.createSheet("学生表");
       /*创建行*/
       Row row1 = sheet.createRow(0);
//       第一行的第一个单元格
       Cell cell11 = row1.createCell(0);
       cell11.setCellValue("学号");
//       第一行第二个单元格
       Cell cell12 = row1.createCell(1);
       cell12.setCellValue("名字");

       Row row2 = sheet.createRow(1);
       Cell cell21 = row2.createCell(0);
       cell21.setCellValue("1");
       Cell cell22 = row2.createCell(1);
       cell22.setCellValue("yy");


//      IO流生成文件,xls需要加后缀
       FileOutputStream fileOutputStream = new FileOutputStream(PATH + "studen07.xlsx");
       workbook.write(fileOutputStream);
//       关闭IO流
       fileOutputStream.close();
   }
```



### 数据批量

```java
public void test3big() throws Exception {
       long begin = System.currentTimeMillis();

       Workbook workbook = new HSSFWorkbook();
       Sheet big = workbook.createSheet("big");
       for (int i = 0; i < 65536; i++) {
           Row row = big.createRow(i);
           for (int j = 0; j < 3; j++) {
               Cell cell = row.createCell(j);
               cell.setCellValue(j);
           }
       }
       System.out.println("over");
       FileOutputStream fileOutputStream = new FileOutputStream(PATH + "03big.xls");
       workbook.write(fileOutputStream);
       fileOutputStream.close();

       long last  = System.currentTimeMillis();
       System.out.println("执行时间为"+(last-begin));
   }
```

####　HSSF的执行时间

![image-20200723193501577](excal.assets/image-20200723193501577.png)

#### XSSF时间

![image-20200723193647685](excal.assets/image-20200723193647685.png)

####　SXSSF

```java
Workbook workbook = new SXSSFWorkbook();
//关闭流之后java清理临时文件
        ((SXSSFWorkbook) workbook).dispose();
```

![image-20200723200348890](excal.assets/image-20200723200348890.png)

## 导入

```java
 @Test
    public void read03() throws Exception {
        //创建文件流读取文件
        FileInputStream fileOutputStream = new FileInputStream(PATH + "studen03.xls");
        //读取获取到的文件
        Workbook workbook = new HSSFWorkbook(fileOutputStream);
        //读取第一张表
        Sheet sheetAt = workbook.getSheetAt(0);
        //读取第一行
        Row row = sheetAt.getRow(0);
        //读取第一行的第一个单元格
        Cell cell = row.getCell(0);
        System.out.println(cell.getStringCellValue());

        fileOutputStream.close();

    }
```

发现如果要获取指定的值，就需要**指定他的类型**，所以遍历的时候需要判断他的类型

```java
for (Row row : sheetAt){
            for (Cell cell : row){
                //获取值的类型
                int cellType = cell.getCellType();
                    String value = "";
                    switch (cellType){
                        case CELL_TYPE_STRING :
                            value =cell.getStringCellValue();
                            break;
                            //数字里还有日期也要区分
                        case CELL_TYPE_NUMERIC:
                            if(HSSFDateUtil.isCellDateFormatted(cell)){
                                Date date = cell.getDateCellValue();
                                value =date.toString();
                            }
                            else{
                                cell.setCellType(CELL_TYPE_STRING);
                                value = cell.getStringCellValue();
                            }
                            break;
                        case CELL_TYPE_BOOLEAN:
                            value = String.valueOf(cell.getBooleanCellValue()) ;
                            break;
                        case CELL_TYPE_BLANK:
                            break;
                        case CELL_TYPE_ERROR:
                            value = "error";
                            break;
                    }
                System.out.print(value);
            }
```

### 导入多个sheet

在导入单个sheet的基础上，将获取指定sheet变成遍历所有sheet

```java
			for(Sheet sheetAt : workbook){
            //获取工作表名称
            System.out.println(sheetAt.getSheetName());
```

![image-20200729224002672](C:\Users\Barcelona\AppData\Roaming\Typora\typora-user-images\image-20200729224002672.png)



# easyExcel

导入依赖（easyexcel依赖中已经有poi的依赖）

```java
<dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>easyexcel</artifactId>
            <version>2.1.6</version>
        </dependency>
```

## 字段实体类

```java
public class excel {
    @ExcelProperty("字符串标题")
    private String string;
    @ExcelProperty("日期标题")
    private Date date;
    @ExcelProperty("数字标题")
    private int aDouble;

    public excel() {
    }

    public excel(String string, Date date, int aDouble) {
        this.string = string;
        this.date = date;
        this.aDouble = aDouble;
    }

    public String getString() {
        return string;
    }

    public void setString(String string) {
        this.string = string;
    }

    public Date getDate() {
        return date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    public int getaDouble() {
        return aDouble;
    }

    public void setaDouble(int aDouble) {
        this.aDouble = aDouble;
    }
}

```

### 指定列的前后顺序

```java
@ExcelProperty(value = "姓名",index = 1)
    private String string;
    @ExcelProperty(value = "日期",index = 2)
    private Date date;
    @ExcelProperty(value = "学号",index = 0)
    private int aDouble;
```

如果指定列写入，那么忽略的列就会空出来

### 复杂头

```java
@ExcelProperty({"主标题", "字符串标题"})
    private String string;
    @ExcelProperty({"主标题", "日期标题"})
    private Date date;
    @ExcelProperty({"主标题", "数字标题"})
    private int aDouble;
```

![image-20200724161447065](excal.assets/image-20200724161447065.png)



## 写入

### 将数据写入list

```java
	 //写入list
    private List<excel> data(){
        List< excel > excels = new ArrayList<>();
        for(int i = 0;i < 10; i++){
            excel e = new excel();
            e.setaDouble(i);
            e.setString("yzy");
            e.setDate(new Date());
            excels.add(e);
        }
        return excels;
    }
```

### 简单的写入方法

list写入excel

```
 //将list写入excel
    @Test
    public void write(){
        //   第一个参数为路径，第二个参数为标题的实体类
//          然后写入木板，再将执行list方法
        EasyExcel.write(PATH+"easy.xlsx",excel.class).sheet("模板").doWrite(data());
    }
```

<img src="excal.assets/image-20200724135850856.png" alt="image-20200724135850856" style="zoom: 50%;" />



### 指定列写入

```java
public void daochuzhidinglie(){
        /*忽略到导出的列*/

        //set用来存储需要忽略的列名
        Set<String> set = new HashSet<>();
        //指定忽略的列,列明为字段名
        set.add("aDouble");
        //过滤写入
        EasyExcel.write(PATH+"导出指定列1.xlsx",excel.class).excludeColumnFiledNames(set).sheet("1").doWrite(data());

        /*指定要导出的列*/
        /*//set用来存储需要忽略的列名
        Set<String> set1 = new HashSet<>();
        //指定的列明,名称为字段名
        set1.add("date");
        set1.add("string");
        //过滤写入
        EasyExcel.write(PATH+"导出指定列1.xlsx",excel.class).includeColumnFiledNames(set1).sheet("指定学号名称").doWrite(data());
   */ }
```

忽略学号

![image-20200724160007582](excal.assets/image-20200724160007582.png)

==注意点==，如果指定了列的顺序，那么指定列写入就会使其他的列空着

![image-20200724160526727](excal.assets/image-20200724160526727.png)

### 写入图片

```java
public void pic() throws Exception {
        //InputStream inputStream = null;
        ArrayList< excel > excels = new ArrayList<>();
        excel excel = new excel();
        //图片路径
        String picPath = PATH+"1.jpg";
     /*五种类型的图片*/
        excel.setBytes(FileUtils.readFileToByteArray(new File(picPath)));
        //excel.setFile(new File(picPath));
        //excel.setPic(picPath);
        //inputStream = FileUtils.openInputStream(new File(picPath));
        //excel.setUrl(new URL(""));

        excels.add(excel);
        EasyExcel.write(PATH+"pic.xlsx",excel.class).sheet().doWrite(excels);
        //inputStream.close();
    }
```

![image-20200724163956491](excal.assets/image-20200724163956491.png)



## 读取

### 监听器

读取exccel数据，需要一个监听器用于判断

```java
public class UserInfoDataListener extends AnalysisEventListener<excel> {
    
    //每次读取100条数据就进行保存操作
    private static final int BATCH_COUNT = 100;
    //由于每次读都是新new UserInfoDataListener的，所以这个list不会存在线程安全问题
    List<excel> list = new ArrayList<>();

    @Override
    //excel 类型
    //AnalysisContext 分析上下文
    public void invoke(excel data, AnalysisContext analysisContext) {
        //读取到的数据会变成JSON字符串打印出来
        System.out.println("解析到一条数据:{}"+ JSON.toJSONString(data));
        //放入list中,判断list存的数据是否超过限度,超过就存入数据库并将list清空
        list.add(data);
        if (list.size() >= BATCH_COUNT) {
            saveData();
            // 存储完成清理 list
            list.clear();
        }
    }

    @Override
    public void doAfterAllAnalysed(AnalysisContext analysisContext) {
        // 这里也要保存数据，确保最后遗留的数据也存储到数据库
        saveData();
        System.out.println("所有数据解析完成！");
    }

    //写入数据库的业务
    private void saveData() {
        System.out.println("{}条数据，开始存储数据库！" +list.size());
        //userService.save(list);
        System.out.println("存储数据库成功！");
    }
}
```

读取方法

```java
@Test
    public void read(){
        //  read的第三个参数是监听器用于判断list中的数据是否存入数据库
        EasyExcel.read(PATH+"easy.xlsx",excel.class,new UserInfoDataListener()).sheet().doRead();
    }
```

![image-20200724142315065](excal.assets/image-20200724142315065.png)